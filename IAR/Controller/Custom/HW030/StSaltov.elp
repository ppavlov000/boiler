//---------------------------------------------------------------------------------------------------
// Controller V1.0
// Stariy Saltov V1.0
//---------------------------------------------------------------------------------------------------
// Errors list
//	"None",			//0
//	"Freezing",		//1
//	"Sensor",			//2
//	"Fan IN",			//3
//	"Fan OUT",		//4			
//	"Disabled",		//5	
//	"Enabled",		//6	
//	"control  ",		//7
//	"Freez   1",		//8
//	"Freez   2",		//9
//	"Sensor  1",		//10
//	"Sensor  2",		//11
//---------------------------------------------------------------------------------------------------
// Interrupt table
goto automat_mode;
goto stop_mode;
goto manual_mode;
goto error_mode;
goto custom_mode;
end;
//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
custom_mode:
mode=4;
end;
//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
error_mode:
mode=3;
end;
//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
manual_mode:
mode=2;
end;
//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
stop_mode:
//mode=1;
goto automat_mode;
end;
//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
check_freeze_0:
pass_if_false reg[0];       // No errors
ret;
pass_if_false di[0];
ret;
error=8;
pid.enable[0]=2;
pid.power[0]=999;
reg[0]=1;
ret;
//---------------------------------------------------------------------------------------------------
check_sensor_0:
pass_if_false reg[0];       // No errors
ret;
reg[2]=ai[0]>900;
pass_if_true reg[2];
ret;
error=10;
pid.enable[0]=2;
pid.power[0]=999;
reg[0]=1;
ret;
//---------------------------------------------------------------------------------------------------
check_freeze_1:
pass_if_false reg[1];       // No errors
ret;
pass_if_false di[1];
ret;
error=9;
pid.enable[1]=2;
pid.power[1]=999;
reg[1]=1;
ret;
//---------------------------------------------------------------------------------------------------
check_sensor_1:
pass_if_false reg[1];       // No errors
ret;
reg[2]=ai[1]>900;
pass_if_true reg[2];
ret;
error=11;
pid.enable[1]=2;
pid.power[1]=999;
reg[1]=1;
ret;
//---------------------------------------------------------------------------------------------------
pritok_0_start:
// Check errors
call check_freeze_0;
call check_sensor_0;
pass_if_false reg[0];       // No errors
ret;
pid.enable[0]=1;             // Pritok 0 is in AUTO mode
// if timer0 is not zero - heating
pass_if_false timer[0];
pid.power[0]=999;
pass_if_false timer[0];
ret;
// if timer0 is zero - pritok 0 started
do[3]=1;
ret;
//---------------------------------------------------------------------------------------------------
pritok_0_stop:
timer[0]=180000;
pid.enable[0]=0;             // Pritok 0 is in STOP mode
pid.power[0]=999;
reg[0]=0;
ret;
//---------------------------------------------------------------------------------------------------
pritok_1_start:
// Check errors
call check_freeze_1;
call check_sensor_1;
pass_if_false reg[1];       // No errors
ret;
pid.enable[1]=1;             // Pritok 1 is in AUTO mode
// if timer0 is not zero - heating
pass_if_false timer[1];
pid.power[1]=999;
pass_if_false timer[1];
ret;
// if timer1 is zero - pritok 1 started
do[4]=1;
ret;
//---------------------------------------------------------------------------------------------------
pritok_1_stop:
// Check errors
timer[1]=180000;
pid.enable[1]=0;             // Pritok 1 is in STOP mode
//ao[1]=1000;
//do[1]=1;
//do[2]=0;
pid.power[1]=999;
reg[1]=0;
ret;
//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
// Main program for handling any equipment
automat_mode:
mode=0;
reg[0]=0;
reg[1]=0;
// Pid cofficients init
pid.enable[0]=0;
pid.enable[1]=0;
pid.enable[2]=0;
pid.enable[3]=0;

pid.channel[0]=0;
pid.t0[0]=200;
pid.p[0]=200;
pid.i[0]=200;
pid.d[0]=1000;
pid.ti[0]=60;
pid.pow_min[0]=200;
pid.pow_max[0]=1000;
pid.t3max[0]=155;

pid.channel[1]=1;
pid.t0[1]=200;
pid.p[1]=200;
pid.i[1]=200;
pid.d[1]=1000;
pid.ti[1]=60;
pid.pow_min[1]=200;
pid.pow_max[1]=1000;
pid.t3max[1]=155;

//ao[0]=1000;
//ao[1]=1000;
//do[1]=1;
//do[2]=0;
pid.power[0]=999;
pid.power[1]=999;
pid.p3[0]=0;
pid.p3[1]=0;
do[3]=0;
do[4]=0;

timer[0]=180000;
timer[1]=180000;
//*****************************************************************************
// Main loop
//*****************************************************************************
main_loop:

ao[0]=pid.power[0];
ao[1]=pid.power[1];
do[1]=pid.open[1];
do[2]=pid.close[1];

pass_if_false di[2];
call pritok_0_start;
pass_if_false di[3];
call pritok_1_start;

pass_if_true di[2];
call pritok_0_stop;
pass_if_true di[3];
call pritok_1_stop;

goto main_loop;
//*****************************************************************************
//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
// Routines
Delay_ms:
pass_if_false timer[0];
goto Delay_ms;
ret;
//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
